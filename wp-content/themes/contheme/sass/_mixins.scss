$t: transparent;

@mixin mobile {
	@media screen and (max-width:640px) {
		@content;
	}
}

@mixin tab {
	@media screen and (max-width:1024px) {
		@content;
	}
}

@mixin gap($mar: 25px, $border: transparent){
	width: 80%;
	margin: $mar auto $mar;
	border-bottom: 1px solid $border;
}

@mixin box ($bg:transparent, $p:15px, $r:0px, $b:transparent, $s:transparent) {
	background-color: $bg;
	padding: $p;
	border-radius: $r;
	border: 1px solid $b;
	box-shadow: 2px 2px 2px $s, -2px 2px 2px $s;
}

@mixin round ($width, $border:transparent, $shadow:transparent) {
	width: $width;
	height: $width;
	border-radius: $width / 2;
	border: 1px solid $border;
	box-shadow: 1px 1px 1px $shadow;

}
@mixin button ($color, $bg, $border:transparent, $shadow:transparent, $radius:0px) {
	color: $color;
	background-color: $bg;
	border: 1px solid $border;
	box-shadow: 1px 2px 2px $shadow;
	border-radius: $radius;
}

button.custom, .button.custom {
    background-color: #3ADB3A;
    border-color: #22bb22;
    color: #FFFFFF; }
    button.success:hover, button.success:focus, .button.success:hover, .button.success:focus {
      background-color: #22bb22; }
    button.success:hover, button.success:focus, .button.success:hover, .button.success:focus {
      color: #FFFFFF; }

			
@mixin angle($pseudo, $flip: false, $angle: 1.5deg) {
  // Possible values for $pseudo are: before, after, both
  @if $pseudo == 'before' or $pseudo == 'after' or $pseudo == 'both' {
    position: relative;
    z-index: 1;
    $selector: if($pseudo == 'both', '&:before,&:after', '&:#{$pseudo}');

    #{$selector} {
      background: inherit;
      content: '';
      display: block;
      height: 50%;
      left: 0;
      position: absolute;
      right: 0;
      z-index: -1;
      -webkit-backface-visibility: hidden; // for Chrome Windows
    }

    @if $pseudo == 'before' {
      #{$selector} {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }
    }

    @if $pseudo == 'after' {
      #{$selector} {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 100%;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }

    @if $pseudo == 'both' {
      &:before {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }

      &:after {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }
  }
}

// slanted edges here
.edge--bottom {
  @include angle(after);
}

.edge--bottom--reverse {
  @include angle(after, true);
}

.edge--top {
  @include angle(before);
}

.edge--top--reverse {
  @include angle(before, true);
}

.edge--both {
  @include angle(both);
}

.edge--both--reverse {
  @include angle(both, true);
}

.-berry {
  background: #b52b4a;
}

.-blue {
  background: #41ade5
}

.-orange {
  background: #de6628;
}

.-green {
  background: #5e9b42;
}
